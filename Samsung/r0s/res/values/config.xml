<?xml version="1.0" encoding="utf-8"?>
<resources>
	<!-- Screen brightness used to dim the screen when the user activity
         timeout expires.  May be less than the minimum allowed brightness setting
         that can be set by the user. -->
	<integer name="config_screenBrightnessDim">30</integer>
	
	<!-- User activity timeout: Maximum screen dim duration as a percentage of screen off timeout.
    
         This resource is similar to config_maximumScreenDimDuration but the maximum
         screen dim duration is defined as a ratio of the overall screen off timeout
         instead of as an absolute value in milliseconds.  This is useful for reducing
         the dim duration when the screen off timeout is very short.
    
         When computing the screen dim duration, the power manager uses the lesser
         of the effective durations expressed by config_maximumScreenDimDuration and
         config_maximumScreenDimRatio.
    
         This value must be between 0% and 100%.  If the value is zero, the screen will not
         dim before the device goes to sleep.
    -->
	
	<fraction name="config_maximumScreenDimRatio">29.999996%</fraction>
	<!-- Screen brightness used to dim the screen while dozing in a very low power state.
         May be less than the minimum allowed brightness setting
         that can be set by the user. -->
	<integer name="config_screenBrightnessDoze">15</integer>
	
	<!-- An array describing the screen's backlight values corresponding to the brightness
         values in the config_screenBrightnessNits array.
         This array should be equal in size to config_screenBrightnessBacklight. -->
	<integer-array name="config_screenBrightnessBacklight">
		<item>1</item>
		<item>510</item>
	</integer-array>
	
	<!-- An array of floats describing the screen brightness in nits corresponding to the backlight
         values in the config_screenBrightnessBacklight array.  On OLED displays these  values
         should be measured with an all white image while the display is in the fully on state.
         Note that this value should *not* reflect the maximum brightness value for any high
         brightness modes but only the maximum brightness value obtainable in a sustainable manner.
         This array should be equal in size to config_screenBrightnessBacklight -->
	<array name="config_screenBrightnessNits">
		<item>1</item>
		<item>800</item>
	</array>
	
	<!-- Minimum screen brightness setting allowed by the power manager.
         The user is forbidden from setting the brightness below this level. -->
	<integer name="config_screenBrightnessSettingMinimum">1</integer>
	
	<!-- Maximum screen brightness setting allowed by the power manager.
         The user is forbidden from setting the brightness above this level. -->
	<integer name="config_screenBrightnessSettingMaximum">500</integer>
	
	<!-- Stability requirements in milliseconds for accepting a new brightness level.  This is used
         for debouncing the light sensor.  Different constants are used to debounce the light sensor
         when adapting to brighter or darker environments.  This parameter controls how quickly
         brightness changes occur in response to an observed change in light level that exceeds the
         hysteresis threshold. -->
	<integer name="config_autoBrightnessBrighteningLightDebounce">800</integer>
	<integer name="config_autoBrightnessDarkeningLightDebounce">800</integer>
	
	<!-- Fast brightness animation ramp rate in brightness units per second-->
	<integer name="config_brightness_ramp_rate_fast">1800</integer>
	
	<!-- Slow brightness animation ramp rate in brightness units per second-->
	<integer name="config_brightness_ramp_rate_slow">600</integer>
	
	<!-- Flag indicating whether the we should enable the automatic brightness in Settings.
         Software implementation will be used if config_hardware_auto_brightness_available is not set -->
	<bool name="config_automatic_brightness_available">true</bool>
	
	<!-- Amount of time it takes for the light sensor to warm up in milliseconds.
         For this time after the screen turns on, the Power Manager
         will not debounce light sensor readings -->
	<integer name="config_lightSensorWarmupTime">200</integer>
	
	<!-- Array of light sensor LUX values to define our levels for auto backlight brightness support.
         The N entries of this array define N  1 zones as follows:
         Zone 0:        0 <= LUX < array[0]
         Zone 1:        array[0] <= LUX < array[1]
         ...
         Zone N:        array[N - 1] <= LUX < array[N]
         Zone N + 1     array[N] <= LUX < infinity
         Must be overridden in platform specific overlays -->
	<integer-array name="config_autoBrightnessLevels">
		<item>1</item>
        <item>2</item>
        <item>3</item>
        <item>4</item>
        <item>5</item>
        <item>10</item>
        <item>15</item>
        <item>20</item>
        <item>25</item>
        <item>30</item>
        <item>35</item>
        <item>40</item>
        <item>45</item>
        <item>50</item>
        <item>100</item>
        <item>300</item>
        <item>500</item>
        <item>1000</item>
        <item>2000</item>
        <item>2999</item>
        <item>3000</item>
        <item>4000</item>
        <item>5000</item>
        <item>6000</item>
        <item>7000</item>
        <item>8000</item>
        <item>9000</item>
        <item>10000</item>
        <item>20000</item>
		<item>50000</item>
		<item>999999</item>
	</integer-array>
	
	<!-- Array of desired screen brightness in nits corresponding to the lux values
         in the config_autoBrightnessLevels array. As with config_screenBrightnessMinimumNits and
         config_screenBrightnessMaximumNits, the display brightness is defined as the measured
         brightness of an all-white image.
         If this is defined then:
            - config_autoBrightnessLcdBacklightValues should not be defined
            - config_screenBrightnessNits must be defined
            - config_screenBrightnessBacklight must be defined
         This array should have size one greater than the size of the config_autoBrightnessLevels
         array. The brightness values must be non-negative and non-decreasing. This must be
         overridden in platform specific overlays -->
	<array name="config_autoBrightnessDisplayValuesNits">
		<item>1</item>
		<item>12</item>
        <item>17</item>
        <item>25</item>
        <item>30</item>
        <item>35</item>
        <item>40</item>
        <item>62</item>
        <item>85</item>
        <item>108</item>
        <item>119</item>
        <item>119</item>
        <item>119</item>
        <item>123</item>
        <item>123</item>
        <item>126</item>
        <item>134</item>
        <item>152</item>
        <item>178</item>
        <item>249</item>
        <item>420</item>
        <item>420</item>
        <item>468</item>
        <item>515</item>
        <item>563</item>
        <item>610</item>
        <item>658</item>
        <item>705</item>
        <item>753</item>
        <item>776</item>
        <item>800</item>
        <item>900</item>
	</array>
	
	<!-- Display has physical cutout -->
	<string name="config_mainBuiltInDisplayCutout">M 0,0 H -9.333333333333333 V 27 H 9.333333333333333 V 0 H 0 Z @dp</string>
	
	<!-- Height of the status bar in portrait -->
	<dimen name="status_bar_height">102px</dimen>
	
	<!-- Radius of the software rounded corners at the top of the display in its natural
        orientation. If zero, the value of rounded_corner_radius is used. -->
	<dimen name="rounded_corner_radius_top">24dp</dimen>
	
	<!-- Radius of the software rounded corners at the bottom of the display in its natural
        orientation. If zero, the value of rounded_corner_radius is used. -->
	<dimen name="rounded_corner_radius_bottom">24dp</dimen>
	
	
	<!-- Power Management: Specifies whether to decouple the auto-suspend state of the
         device from the display on/off state.
         When false, autosuspend_disable() will be called before the display is turned on
         and autosuspend_enable() will be called after the display is turned off.
         This mode provides best compatibility for devices using legacy power management
         features such as early suspend / late resume.
         When true, autosuspend_display() and autosuspend_enable() will be called
         independently of whether the display is being turned on or off.  This mode
         enables the power manager to suspend the application processor while the
         display is on.
         This resource should be set to "true" when a doze component has been specified
         to maximize power savings but not all devices support it.
         Refer to autosuspend.h for details.
    -->
	<bool name="config_powerDecoupleAutoSuspendModeFromDisplay">true</bool>
	
	<!-- If true, the display will be shifted around in ambient mode. -->
    <bool name="config_enableBurnInProtection">true</bool>
	
	<!-- Control whether the always on display mode is available. This should only be enabled on
         devices where the display has be tuned to be power efficient in DOZE and/or DOZE_SUSPEND
         states. -->
    <bool name="config_dozeAlwaysOnDisplayAvailable">true</bool>
	
</resources>
